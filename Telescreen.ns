Newspeak3
'Root'
class Telescreen usingPlatform: p <HopscotchPlatform> ide: webIDE <HopscotchWebIDE> = (
(*
Telescreen aspires to be a presentation manager that allows embedding of live Newspeak code, and live editing of content.
This is a basic prototype, that relies on a 2-view HTML editor rather than a WYSIWYG one.


*)
    |
    private List = p collections List.
    private Presenter = p hopscotch Presenter.
    private Subject = p hopscotch Subject.
    private ProgrammingPresenter = webIDE browsing ProgrammingPresenter.  
    private Document = webIDE documents Document.
    private TwoViewEditorSubject = webIDE documents TwoViewEditorSubject.
    private Root = webIDE namespacing Root.
    private NamespaceSubject = webIDE browsing NamespaceSubject.
    private Utilities = webIDE browsing Utilities.
    |
) (
public class Presentation named: n <String> = (
  (* The model for a presentation. A presentation has a #name, and consists of a list of Documents, #slides, each representing a slide.*)
  | public name <String> ::= n.  public slides <List[Document]> ::= List new. |
) (
) : (
)
class TelescreenPresenter onSubject: s <TelescreenSubject> = ProgrammingPresenter onSubject: s (
	|
	|
) (
public isKindOfTelescreenPresenter ^ <Boolean> = (
  ^true
)
isMyKind: other <Fragment>  ^ <Boolean> = (
  ^other isKindOfTelescreenPresenter
)
tsMenu ^ <Menu> = (
  (* Need inspect presenter, delete *)
  ^menuWithLabelsAndActions: {
        {'Inspect Presenter'. [respondToInspectPresenter]}.
        {'Delete'. [respondToDelete]}.
	}
)
newSlideButton ^ <ButtonFragment> = (
  ^button: 'New' action: [updateGUI: [subject new]]
)
nextSlideButton ^ <ButtonFragment> = (
  ^button: 'Next' action: [updateGUI: [subject next]]
)
previousSlideButton ^ <ButtonFragment> = (
  ^button: 'Previous' action: [updateGUI: [subject previous]]
)
currentSlide ^ <TwoViewEditorPresenter> = (
  ^subject currentSlide presenter
)
respondToDelete = (
	updateGUI: [
    	  Root removeKey: subject name.
	  enterSubject: NamespaceSubject new.
        ]
)
helpText ^ <Fragment> = (
  | 
  mapping = Map new. 
  menuImage = Utilities uriForIconNamed: #hsDropdownImage. 
  referenceImage = Utilities uriForIconNamed: #itemReferencesImage.
  |
  mapping
    at: #newSlideButton put: newSlideButton;
    at: #previousSlideButton put: previousSlideButton;
    at: #nextSlideButton put: nextSlideButton;
    at: #hopscotchTelescreenActionsMenuButton put: (dropDownMenu: [tsMenu]);
    at: #hopscotchTelescreenReferencesButton put: (itemReferencesButtonWithAction: [browseSelector: subject name]);
    at: #hopscotchHelpButton put: helpButton;
    at: #hopscotchRefreshButton put: refreshButton;
    at: #hopscotchSaveButton put: (saveButtonWithAction: [subject save]).

  ^ampleforth: 'A TelescreenPresenter presenter provides a view of a slide presentation. The first line tells you the presentation name and provides the following buttons:
  <ul>
  <li> <div class="newSlideButton"> </div>Creates a new blank slide immediately after the current slide, and makes it the current slide. </li>
  <li> <div class="previousSlideButton"> </div>Moves to the preceding slide, if it exists. </li>
  <li> <div class="nextSlideButton"> </div>Moves to the next slide, if it exists. </li>
  <li> <div class="hopscotchTelescreenReferencesButton"> </div>Allows you to find references to it. </li>
  <li><div class="hopscotchSaveButton"> </div> Downloads it. The presentation is saved as a directory with the same name as the presentation, inside of which each slide is saved as an HTML file.
   .</li>
 <li><div class="hopscotchRefreshButton"> </div> Refreshes the display</li>
    <li><div class="hopscotchHelpButton"> </div> Shows this help message.</li>
   <li> <div class="hopscotchTelescreenActionsMenuButton"> </div> Opens a menu of additional operations, such as deleting the presentation or inspecting this presenter.</ul> <br>
  You can access references to the presentation via  <img src="', referenceImage , '" alt="" width="30" height="30">, or access the menu via <img src="', menuImage, '" alt="" width="30" height="30">. <br><br>
The current slide is shown below all of these controls.
'  mapping: mapping
)
definition ^ <Fragment> = (
  (* Still lacking a display of the complete list of slides, ideally as thumbnails *)
  ^column: {
    row: {
       label: subject name.
       smallBlank.
       newSlideButton.
       smallBlank.
       previousSlideButton.
       smallBlank.  
       nextSlideButton.
       smallBlank.
       itemReferencesButtonWithAction: [browseSelector: subject name].
       smallBlank.
       saveButtonWithAction: [subject save].
       smallBlank.
       refreshButton.			
       smallBlank.
       helpButton.
       smallBlank.
       dropDownMenu: [tsMenu].
      }.
      currentSlide
    }
)
) : (
)
public class TelescreenSubject onModel: m <Presentation> (* :exemplar: TelescreenSubject onModel: (Presentation named: 'ExemplarPresentation') *)= Subject onModel: m (
  (* Represents an actively viewed presentation.  At any time, the presentation is at a particular slide, represented by its index, #currentSlideIndex, in the slides list. The actual document represnting the slide is accessible by invoking #currentSlide.
*)
  |
  public name <String> = presentation name.
  currentSlideIndex <Integer> ::= 1 min: presentation slides size.
  slides <List[TwoViewEditorSubject]> ::= presentation slides collect: [:s <Document> | TwoViewEditorSubject onModel: s].
  |
) (
public createPresenter ^ <TelescreenPresenter> = (
  ^TelescreenPresenter onSubject: self
)
public isKindOfTelescreenSubject ^ <Boolean> = (
  ^true
)
isMyKind: other <Fragment>  ^ <Boolean> = (
  ^other isKindOfTelescreenSubject
)
public previous = (
  currentSlideIndex > 1 ifTrue: [currentSlideIndex:: currentSlideIndex - 1]
)
public next = (
  currentSlideIndex < slides size ifTrue: [currentSlideIndex:: currentSlideIndex + 1]
)
public save = (
  #TODO.
  (* Ensure directory named name exists and cd to it as needed; *)
  slides do: [:s | s save].
)
public currentSlide ^ <TwoViewEditorSubject> = (
  slides isEmpty ifTrue: [new].
  ^slides at: currentSlideIndex
)
public presentation ^ <Presentation> = (
  ^model
)
public new = (
  |
  ed <TwoViewEditorSubject> = TwoViewEditorSubject onModel: (Document named: name, '_slide#', (slides size + 1) printString contents: '').
  l1 <List[TwoViewEditorSubject]> = (slides copyFrom: 1 to: currentSlideIndex) addLast: ed; yourself.
  l2 <List[TwoViewEditorSubject]> = slides copyFrom: currentSlideIndex +1 to: slides size.
  |
  slides:: l1, l2.
  model slides: (slides collect: [:s | s document]).
  next.
)
) : (
)
) : (
)
