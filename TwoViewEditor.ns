Newspeak3
'Root'
class TwoViewEditor usingPlatform: p  = (
(*
This module implements an editor with two views: one view is a text editor on raw HTML,
and the second is the same HTML, rendered. When the raw source is accepted, it results
in a change to the rendered version. 

Ultimately, we want to revise this to make it is fully live - every edit causes immediate change in the rendered HTML.

*)
	|	
    private Subject = p hopscotch Subject.
    private Presenter = p hopscotch Presenter.
	|
) (
public class TwoViewEditorSubject onModel: m <Array[String]> = Subject onModel: m (
(*  We really want a mutable string as a model, but there is no such
thing in our system, so we use a one-element Array[String].
*)
  | public isAmpleforth <Boolean> ::= false. |
) (
public createPresenter ^ <Presenter>  = (
  ^TwoViewEditorPresenter onSubject: self
)
public text ^ <String> = (
  ^model first
)
public setText: s <String> = (
  model at: 1 put: s
)
public isKindOfTwoViewSubject ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfTwoViewSubject
)
) : (
public initialContents: s <String> = (
  ^onModel: (Array withAll: {s})
)
)
class TwoViewEditorPresenter onSubject: s <TwoViewEditorSubject> = Presenter onSubject: s (
  | rendered <HolderComposer> = holder: (render: subject text). |
) (
render: s = (
  ^subject isAmpleforth ifTrue: [ampleforth: s] ifFalse: [html: s]
)
public isKindOfTwoViewPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfTwoViewPresenter
)
updateVisualsFromSameKind: oldFragment <Fragment> ^ <Alien[Element]> = (
  (* Need to ensure we have old editor and new rendering? Or keep rendered version in a holder and/or update via  duct? *)
  ^visual
)
definition ^ <Fragment> = (
  | cm <CodeMirrorFragment> = codeMirror: subject text. | 
  rendered content: (render: subject text). 
  cm 
    changeResponse: [:ed <CodeMirrorFragment> :event <Event>  | 
    subject setText: ed textBeingAccepted. 
    rendered content: (render: subject text) 
    ]; 
    (*cancelResponse: cancelResponse;*)
    acceptResponse: [:ed <CodeMirrorFragment> :event <Event>  | updateGUI: [ subject setText: ed textBeingAccepted]].
  ^row: { expanded: [cm] collapsed: [nothing]. rendered}
)
) : (
)
) : (
)
