Newspeak3
'Root'
class CroquetCounterUI usingPlatform: p  = (
	|
	private Subject = p hopscotch Subject.
	private Presenter = p hopscotch Presenter. 
    first ::= true.
    getCroquetView = [p js global at: #theView].
    croquetView_slot
	|
    
) (
public class Counter = (
	| public count <Integer> ::= 0. |
) (
) : (
)
class CounterPresenter onSubject: s <CounterSubject> = Presenter  onSubject: s (
) (
public isKindOfCounterPresenter = (
  ^true
)
isMyKind: other = (
  ^other isKindOfCounterPresenter
)
scope = (
  ^'newspeak_croquet_counter'
)
definition = (
  ^row: {
      label: subject count. 
      mediumBlank. 
      button: 'increment' action: [croquetView publish: scope event: #increment].
      button: 'decrement' action: [croquetView publish: scope event: #decrement].
       button: 'reset' action: [croquetView publish: scope event: #reset].     
      }.
)
croquetView = (
    croquetView_slot isNil ifTrue: [ensureSubscriptions].
    ^croquetView_slot.
)
ensureSubscriptions = (
     first ifTrue: [
        first:: false.
        croquetView_slot:: getCroquetView value.
        croquetView subscribe: scope eventSpec: #model_increment handler: [:e | updateGUI: [subject increment]].
        croquetView subscribe: scope eventSpec: #model_decrement handler: [:e |updateGUI: [subject decrement]].
        croquetView subscribe: scope eventSpec: #model_reset handler: [:e | updateGUI: [subject clear]].
     ]
)
) : (
)
public class CounterSubject onModel: m <Counter> =  Subject onModel: m(
) (
createPresenter ^ <CounterPresenter> = (
  ^CounterPresenter onSubject: self
)
public isKindOfCounterSubject = (
  ^true
)
isMyKind: other = (
  ^other isKindOfCounterSubject
)
public decrement = (
  model count: count - 1
)
public count ^ <Integer> = (
  ^model count
)
public clear = (
  model count: 0
)
public increment = (
 'incrementing ' out.
  model count: count + 1
)
) : (
)
) : (
)
