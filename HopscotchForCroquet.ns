Newspeak3
'Root'
class HopscotchForCroquet usingPlatform: p <Platform> hopscotch: H <HopscotchForHTML5 class> = (
	|
(* imports *)
    private HopscotchForHTML5 = H.
    Promise = p actors Promise.
    Resolver = p actors Resolver.
	|
) (
public class Hopscotch usingPlatform: p <Platform> images: images ducts: ds =
  HopscotchForHTML5 usingPlatform: p images: images ducts: ds

(
  |
    buttonCount <Integer> ::= 0.
    js = p js.
    (* Croquet state - must be accessed lazily *)
    getCroquetRootView = [js global at: #theView].
    getCroquetRootModel = [js global at: #theModel].  
    private NewspeakCroquetButtonView_slot <Promise[Alien[NewspeakCroquetButtonView class]]>
    rootView_slot <Alien[NewspeakCroquetView]>
    rootModel_slot <Alien[NewspeakCroquetModel]>
|
) (
class ButtonFragment label: l action: a = super ButtonFragment label: l action: a (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetButtonView]]>
    buttonId <Integer> ::= newButtonId.
    scope_slot <String>
    |
) (
croquetModel = (
    ^croquetView model.
)
private NewspeakCroquetButtonView = (
   NewspeakCroquetButtonView_slot isNil ifTrue: [
     NewspeakCroquetButtonView_slot:: js global at: #NSCroquetButtonView
     ].
   ^NewspeakCroquetButtonView_slot
)
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nsbutton_', buttonId printString].
  ^scope_slot
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <ButtonFragment>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
action = (
  ^[croquetView <-: publish: scope event: #click]
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetButtonView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView subscribe: scope event: #model_createButton handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetButtonView new: m)
      ]. 
      nil
  ].
  rootView publish: 'newspeak_croquet_button' eventSpec: #createButton data: scope.
  ^futureView promise
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_click handler: [:e | super action value]
)
) : (
)
rootView = (
  rootView_slot isNil ifTrue: [rootView_slot:: getCroquetRootView value].
  ^rootView_slot
)
rootModel = (
  rootModel_slot isNil ifTrue: [rootModel_slot:: getCroquetRootModel value].
  ^rootModel_slot
)
newButtonId ^ <Integer> = (
  buttonCount:: buttonCount + 1.
  ^buttonCount
)
) : (
)
) : (
)
