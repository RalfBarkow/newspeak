Newspeak3
'Root'
class MetadataTesting usingPlatform: p <Platform>  metadata: mp <MetadataParsing> minitest: mt <Minitest> = (
	|
    private ClassMirror = p mirrors ClassMirror.
    private TestContext = mt TestContext.
    private MetadataParsing = mp.
	|
) (
public class FactoryTests = TestContext (
) (
class TestEmptyDefaultFactory = (
) (
) : (
)
class TestMetadataWithCommentDefaultFactory (*:factory-metadata: TestMetadataWithCommentDefaultFactory new *) (* Just a comment *) = (
) (
) : (
)
class TestMetadataWithCommentsDefaultFactory (* A regular comment *)  (* Another comment *) (*:factory-metadata: TestMetadataWithCommentsDefaultFactory new *) (* Just a comment *) (* yet another *) = (
) (
) : (
)
class TestMultipleMetadataNoCommentsDefaultFactory (* :a: A *) (* :b: B *) (*:factory-metadata: TestMultipleMetadataNoCommentsDefaultFactory new *) (* :testClass: TTY *) (* :c: C *)= (
) (
) : (
)
class TestMultipleMetadataWithCommentDefaultFactory (* :a: A *) (* :b: B *) (*:factory-metadata: TestMultipleMetadataWithCommentDefaultFactory new *) (* :testClass: TTY *) (* :c: C *) (* A regular comment *)= (
) (
) : (
)
class TestMultipleMetadataWithCommentsDefaultFactory (* A regular comment *)  (* Another comment *) (* :a: A *) (* :b: B *) (* intermediate comment *) (*:factory-metadata: TestMultipleMetadataWithCommentsDefaultFactory new *) (* :testClass: TTY *) (* :c: C *) (* A regular comment *) (* Just a comment *) = (
) (
) : (
)
class TestNoMetadataWithCommentDefaultFactory (* A regular comment *)  = (
) (
) : (
)
class TestEmpty new = (
) (
) : (
)
class TestMetadataWithComment foo: x (*:factory-metadata: TestMetadataWithComment foo: 3 *) (* Just a comment *) = (
) (
) : (
)
class TestMetadataWithComments foo: x (* A regular comment *)  (* Another comment *) (*:factory-metadata: TestMetadataWithComments foo: 4 *) (* Just a comment *) (* yet another *) = (
) (
) : (
)
class TestMultipleMetadataNoComments foo: x (* :a: A *) (* :b: B *) (*:factory-metadata: TestMultipleMetadataNoComments foo: 'abc' *) (* :testClass: TTY *) (* :c: C *)= (
) (
) : (
)
class TestMultipleMetadataWithComment foo: x (* :a: A *) (* :b: B *) (*:factory-metadata: TestMultipleMetadataWithComment foo: 'xyz' *) (* :testClass: TTY *) (* :c: C *) (* A regular comment *)= (
) (
) : (
)
class TestMultipleMetadataWithComments foo: x bar: y (* A regular comment *)  (* Another comment *) (* :a: A *) (* :b: B *) (* intermediate comment *) (*:factory-metadata: TestMultipleMetadataWithComments foo: #bam bar: #baz *) (* :testClass: TTY *) (* :c: C *) (* A regular comment *) (* Just a comment *) = (
) (
) : (
)
class TestNoMetadataWithComment foo: x (* A regular comment *)  = (
) (
) : (
)
class TestNoMetadataWithComments foo: x (* A regular comment *)  (* Another comment *) = (
) (
) : (
)
class TestNoMetadataWithCommentsDefaultFactory new (* A regular comment *)  (* Another comment *) = (
) (
) : (
)
metadataForClass: c <Class> ^ <Map[String, String]> = (
  ^ (ClassMirror reflecting: c) mixin declaration header metadata
)
public testEmpty = (* Test case where there is no metadata or comments *)(
  | metadata = metadataForClass: TestEmpty. |
  assert: metadata isKindOfMap.
  assert: metadata isEmpty.
)
public testNoMetadataWithComment = (* Test case where there is no metadata but there is a regular comment *)(
  | metadata = metadataForClass: TestNoMetadataWithComment. |
  assert: metadata isKindOfMap.
  assert: metadata isEmpty.  
)
public testNoMetadataWithComments = (* Test case where there is no metadata but there are several regular comments *)(
  | metadata = metadataForClass: TestNoMetadataWithComments. |
  assert: metadata isKindOfMap.
  assert: metadata isEmpty.
)
public testMetadataWithComment = (* Test case where there is a metadata comment and a regular comment *)(
  | metadata = metadataForClass: TestMetadataWithComment. |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 1.
  assert: (metadata at: 'factory-metadata') equals: 'TestMetadataWithComment foo: 3'
)
public testMetadataWithComments = (* Test case where there is a metadata comment and several regular comments *)(
  | metadata = metadataForClass: TestMetadataWithComments. |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 1.
  assert: (metadata at: 'factory-metadata') equals: 'TestMetadataWithComments foo: 4'  
)
public testMultipleMetadataNoComments = (* Test case where there are several metadata comments but no regular comments *)(
  | metadata = metadataForClass: TestMultipleMetadataNoComments. |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 5.
  assert: (metadata at: #a) equals: 'A'.
  assert: (metadata at: #b) equals: 'B'.  
  assert: (metadata at: #c) equals: 'C'.
  assert: (metadata at: #testClass) equals: 'TTY'.
  assert: (metadata at: 'factory-metadata') equals: 'TestMultipleMetadataNoComments foo: ''abc'''
)
public testMultipleMetadataWithComment = (* Test case where there is are several metadata comments and a regular comment *)(
  | metadata = metadataForClass: TestMultipleMetadataWithComment. |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 5.
  assert: (metadata at: #a) equals: 'A'.
  assert: (metadata at: #b) equals: 'B'.  
  assert: (metadata at: #c) equals: 'C'.
  assert: (metadata at: #testClass) equals: 'TTY'.  
  assert: (metadata at: 'factory-metadata') equals: 'TestMultipleMetadataWithComment foo: ''xyz'''
)
public testMultipleMetadataWithComments = (* Test case where there are several metadata comments and several regular comments *)(
  | metadata = metadataForClass: TestMultipleMetadataWithComments. |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 5.
  assert: (metadata at: #a) equals: 'A'.
  assert: (metadata at: #b) equals: 'B'.  
  assert: (metadata at: #c) equals: 'C'.
  assert: (metadata at: #testClass) equals: 'TTY'.  
  assert: (metadata at: 'factory-metadata') equals: 'TestMultipleMetadataWithComments foo: #bam bar: #baz'
)
public testEmptyDefaultFactory = (* Test case where there is no metadata or comments *)(
  | metadata = metadataForClass: TestEmptyDefaultFactory. |
  assert: metadata isKindOfMap.
  assert: metadata isEmpty.
)
public testNoMetadataWithCommentDefaultFactory = (* Test case where there is no metadata but there is a regular comment *)(
  | metadata = metadataForClass: TestNoMetadataWithCommentDefaultFactory. |
  assert: metadata isKindOfMap.
  assert: metadata isEmpty.  
)
public testNoMetadataWithCommentsDefaultFactory = (* Test case where there is no metadata but there are several regular comments *)(
  | metadata = metadataForClass: TestNoMetadataWithCommentsDefaultFactory. |
  assert: metadata isKindOfMap.
  assert: metadata isEmpty.
)
public testMultipleMetadataWithCommentsDefaultFactory = (* Test case where there are several metadata comments and several regular comments *)(
  | metadata = metadataForClass: TestMultipleMetadataWithCommentsDefaultFactory. |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 5.
  assert: (metadata at: #a) equals: 'A'.
  assert: (metadata at: #b) equals: 'B'.  
  assert: (metadata at: #c) equals: 'C'.
  assert: (metadata at: #testClass) equals: 'TTY'.  
  assert: (metadata at: 'factory-metadata') equals: 'TestMultipleMetadataWithCommentsDefaultFactory new'
)
public testMultipleMetadataWithCommentDefaultFactory = (* Test case where there is are several metadata comments and a regular comment *)(
  | metadata = metadataForClass: TestMultipleMetadataWithCommentDefaultFactory. |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 5.
  assert: (metadata at: #a) equals: 'A'.
  assert: (metadata at: #b) equals: 'B'.  
  assert: (metadata at: #c) equals: 'C'.
  assert: (metadata at: #testClass) equals: 'TTY'.  
  assert: (metadata at: 'factory-metadata') equals: 'TestMultipleMetadataWithCommentDefaultFactory new'
)
public testMultipleMetadataNoCommentsDefaultFactory = (* Test case where there are several metadata comments but no regular comments *)(
  | metadata = metadataForClass: TestMultipleMetadataNoCommentsDefaultFactory. |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 5.
  assert: (metadata at: #a) equals: 'A'.
  assert: (metadata at: #b) equals: 'B'.  
  assert: (metadata at: #c) equals: 'C'.
  assert: (metadata at: #testClass) equals: 'TTY'.
  assert: (metadata at: 'factory-metadata') equals: 'TestMultipleMetadataNoCommentsDefaultFactory new'
)
public testMetadataWithCommentsDefaultFactory = (* Test case where there is a metadata comment and several regular comments *)(
  | metadata = metadataForClass: TestMetadataWithCommentsDefaultFactory. |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 1.
  assert: (metadata at: 'factory-metadata') equals: 'TestMetadataWithCommentsDefaultFactory new'  
)
public testMetadataWithCommentDefaultFactory = (* Test case where there is a metadata comment and a regular comment *)(
  | metadata = metadataForClass: TestMetadataWithCommentDefaultFactory. |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 1.
  assert: (metadata at: 'factory-metadata') equals: 'TestMetadataWithCommentDefaultFactory new'
)
) : (
TEST_CONTEXT = ()
)
public class MethodTests = TestContext (
) (
metadataForMethod: m <Symbol> ^ <Map[String, String]> = (
  ^ ((ClassMirror reflecting: class) methods findMirrorNamed: m) metadata
)
empty: x = (* Test case where there is no metadata or comments *)(
)
noMetadataWithComment: x (* A regular comment *) = (
)
noMetadataWithComments: x(* A regular comment *)  (* Another comment *)  = (
)
*|\/ x (* :a: A *) (* :b: B *) (* :method-meta: *|\/ 4  *) (* :c: C *)   (* :testMethod: TTY *) (* :return-type: Self *)= (
)
*||| x (* first comment *) (* 2nd comment *) (**) (* :method-meta:    *||| 3  *) (* A single comment *) = (
)
*|| x (* :method-meta:  *|| 2 *) (* A single comment *)= (
)
*| x = (
)
*\/ x (* :a: A *) (* :b: B *) (* :method-meta: *\/ 5  *) (* :c: C *)   (* :testMethod: TTY *) (* :return-type: Self *) (* A regular comment *)= (
)
*\/| x (* First comment *) (* 2nd comment *)(* :a: A *) (* interim comment *) (* :b: B *) (* :method-meta: *\/| 6  *) (* :c: C *)   (* :testMethod: TTY *) (* :return-type: Self *) (* A regular comment *) (**) (* More comments *) = (
)
*\/|| x (* A regular comment *) = (
)
*\/||| x(* A regular comment *)  (* Another comment *)  = (
)
public testEmpty = (* Test case where there is no metadata or comments *)(
  | 
  metadata = metadataForMethod: #testEmpty. 
  pMetadata = metadataForMethod: #empty:.
  bMetadata = metadataForMethod: #*|.  
  |
  assert: metadata isKindOfMap.
  assert: metadata isEmpty.
  assert: pMetadata isKindOfMap.
  assert: pMetadata isEmpty.
  assert: bMetadata isKindOfMap.
  assert: bMetadata isEmpty.  
)
public testNoMetadataWithComments (* A regular comment *)  (* Another comment *) = (* Test case where there is no metadata but there are several regular comments *)(
  | 
  metadata = metadataForMethod: #testNoMetadataWithComments. 
  pMetadata = metadataForMethod: #noMetadataWithComments:.
  bMetadata = metadataForMethod: #*\/|||. 
  |
  assert: metadata isKindOfMap.
  assert: metadata isEmpty.
  assert: pMetadata isKindOfMap.
  assert: pMetadata isEmpty.
  assert: bMetadata isKindOfMap.
  assert: bMetadata isEmpty.    
)
public testNoMetadataWithComment (* regular comment *) = (* Test case where there is no metadata but there is a regular comment *)(
  | 
  metadata = metadataForMethod: #testNoMetadataWithComment.
  pMetadata = metadataForMethod: #noMetadataWithComment:.
  bMetadata = metadataForMethod: #*\/||.
  |
  assert: metadata isKindOfMap.
  assert: metadata isEmpty.
  assert: pMetadata isKindOfMap.
  assert: pMetadata isEmpty.
  assert: bMetadata isKindOfMap.
  assert: bMetadata isEmpty.    
)
public testMultipleMetadataWithComments (* First comment *) (* 2nd comment *)(* :a: A *) (* interim comment *) (* :b: B *) (* :method-meta: testMultipleMetadataWithComments  *) (* :c: C *)   (* :testMethod: TTY *) (* :return-type: Self *) (* A regular comment *) (**) (* More comments *) = (* Test case where there are several metadata comments and several regular comments *)(
  | 
  metadata = metadataForMethod: #testMultipleMetadataWithComments. 
  pMetadata = metadataForMethod: 'multipleMetadataWithComments:'.
  bMetadata = metadataForMethod: '*\/|'. 
  |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 6.
  assert: (metadata at: #a) equals: 'A'.
  assert: (metadata at: #b) equals: 'B'.  
  assert: (metadata at: #c) equals: 'C'.
  assert: (metadata at: #testMethod) equals: 'TTY'.
  assert: (metadata at: 'return-type') equals: 'Self'.  
  assert: (metadata at: 'method-meta') equals: 'testMultipleMetadataWithComments'.
  assert: pMetadata isKindOfMap.
  assert: pMetadata size equals: 6.
  assert: (pMetadata at: #a) equals: 'A'.
  assert: (pMetadata at: #b) equals: 'B'.  
  assert: (pMetadata at: #c) equals: 'C'.
  assert: (pMetadata at: #testMethod) equals: 'TTY'.
  assert: (pMetadata at: 'return-type') equals: 'Self'.  
  assert: (pMetadata at: 'method-meta') equals: 'multipleMetadataWithComments: 6'.
  assert: bMetadata isKindOfMap.
  assert: bMetadata size equals: 6.
  assert: (bMetadata at: #a) equals: 'A'.
  assert: (bMetadata at: #b) equals: 'B'.  
  assert: (bMetadata at: #c) equals: 'C'.
  assert: (bMetadata at: #testMethod) equals: 'TTY'.
  assert: (bMetadata at: 'return-type') equals: 'Self'.  
  assert: (bMetadata at: 'method-meta') equals: '*\/| 6'  
)
multipleMetadataWithComments: x(* First comment *) (* 2nd comment *)(* :a: A *) (* interim comment *) (* :b: B *) (* :method-meta: multipleMetadataWithComments: 6 *) (* :c: C *)   (* :testMethod: TTY *) (* :return-type: Self *) (* A regular comment *) (**) (* More comments *) = (
)
multipleMetadataWithComment: x (* :a: A *) (* :b: B *) (* :method-meta: multipleMetadataWithComment: 5  *) (* :c: C *)   (* :testMethod: TTY *) (* :return-type: Self *) (* A regular comment *)= (
)
public testMultipleMetadataWithComment (* :a: A *) (* :b: B *) (* :method-meta: testMultipleMetadataWithComment  *) (* :c: C *)   (* :testMethod: TTY *) (* :return-type: Self *) (* A regular comment *)= (* Test case where there is are several metadata comments and a regular comment *)(
  | 
  metadata = metadataForMethod: #testMultipleMetadataWithComment. 
  pMetadata = metadataForMethod: 'multipleMetadataWithComment:'.
  bMetadata = metadataForMethod: '*\/'.   
  |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 6.
  assert: (metadata at: #a) equals: 'A'.
  assert: (metadata at: #b) equals: 'B'.  
  assert: (metadata at: #c) equals: 'C'.
  assert: (metadata at: #testMethod) equals: 'TTY'.
  assert: (metadata at: 'return-type') equals: 'Self'.  
  assert: (metadata at: 'method-meta') equals: 'testMultipleMetadataWithComment'.
  assert: pMetadata isKindOfMap.
  assert: pMetadata size equals: 6.
  assert: (pMetadata at: #a) equals: 'A'.
  assert: (pMetadata at: #b) equals: 'B'.  
  assert: (pMetadata at: #c) equals: 'C'.
  assert: (pMetadata at: #testMethod) equals: 'TTY'.
  assert: (pMetadata at: 'return-type') equals: 'Self'.  
  assert: (pMetadata at: 'method-meta') equals: 'multipleMetadataWithComment: 5'.
  assert: bMetadata isKindOfMap.
  assert: bMetadata size equals: 6.
  assert: (bMetadata at: #a) equals: 'A'.
  assert: (bMetadata at: #b) equals: 'B'.  
  assert: (bMetadata at: #c) equals: 'C'.
  assert: (bMetadata at: #testMethod) equals: 'TTY'.
  assert: (bMetadata at: 'return-type') equals: 'Self'.  
  assert: (bMetadata at: 'method-meta') equals: '*\/ 5'  
)
public testMultipleMetadataNoComments (* :a: A *) (* :b: B *) (* :method-meta: testMultipleMetadataNoComments  *) (* :c: C *)   (* :testMethod: TTY *) (* :return-type: Self *) = (* Test case where there are several metadata comments but no regular comments *) (
  | 
  metadata = metadataForMethod: #testMultipleMetadataNoComments. 
  pMetadata = metadataForMethod: #multipleMetadataNoComments:.
  bMetadata = metadataForMethod: '*|\/'. 
  |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 6.
  assert: (metadata at: #a) equals: 'A'.
  assert: (metadata at: #b) equals: 'B'.  
  assert: (metadata at: #c) equals: 'C'.
  assert: (metadata at: #testMethod) equals: 'TTY'.
  assert: (metadata at: 'return-type') equals: 'Self'.  
  assert: (metadata at: 'method-meta') equals: 'testMultipleMetadataNoComments'.
  assert: pMetadata isKindOfMap.
  assert: pMetadata size equals: 6.
  assert: (pMetadata at: #a) equals: 'A'.
  assert: (pMetadata at: #b) equals: 'B'.  
  assert: (pMetadata at: #c) equals: 'C'.
  assert: (pMetadata at: #testMethod) equals: 'TTY'.
  assert: (pMetadata at: 'return-type') equals: 'Self'.  
  assert: (pMetadata at: 'method-meta') equals: 'multipleMetadataNoComments: 4'.
  assert: bMetadata isKindOfMap.
  assert: bMetadata size equals: 6.
  assert: (bMetadata at: #a) equals: 'A'.
  assert: (bMetadata at: #b) equals: 'B'.  
  assert: (bMetadata at: #c) equals: 'C'.
  assert: (bMetadata at: #testMethod) equals: 'TTY'.
  assert: (bMetadata at: 'return-type') equals: 'Self'.  
  assert: (bMetadata at: 'method-meta') equals: '*|\/ 4'  
)
metadataWithComment:x (* :method-meta:  metadataWithComment: 2 *) (* A single comment *)= (
)
metadataWithComments: x (* first comment *) (* 2nd comment *) (**) (* :method-meta:    metadataWithComments: 3  *) (* A single comment *) = (
)
multipleMetadataNoComments: x (* :a: A *) (* :b: B *) (* :method-meta: multipleMetadataNoComments: 4 *) (* :c: C *)   (* :testMethod: TTY *) (* :return-type: Self *) = (
)
public testMetadataWithComment (* :method-meta:    testMetadataWithComment *) (* A single comment *)= (* Test case where there is a metadata comment and a regular comment *)(
  | 
  metadata = metadataForMethod: #testMetadataWithComment. 
  pMetadata = metadataForMethod: #metadataWithComment:.
  bMetadata = metadataForMethod: '*||'.
  |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 1.
  assert: (metadata at: 'method-meta') equals: 'testMetadataWithComment'.
  assert: pMetadata isKindOfMap.
  assert: pMetadata size equals: 1.
  assert: (pMetadata at: 'method-meta') equals: 'metadataWithComment: 2'.
  assert: bMetadata isKindOfMap.
  assert: bMetadata size equals: 1. 
  assert: (bMetadata at: 'method-meta') equals: '*|| 2'  
)
public testMetadataWithComments (* first comment *) (* 2nd comment *) (**) (* :method-meta:    testMetadataWithComments  *) (* A single comment *) = (* Test case where there is a metadata comment and several regular comments *)(
  |
  metadata = metadataForMethod: #testMetadataWithComments.
  pMetadata = metadataForMethod: #metadataWithComments:.
  bMetadata = metadataForMethod: '*|||'. 
  |
  assert: metadata isKindOfMap.
  assert: metadata size equals: 1.
  assert: (metadata at: 'method-meta') equals: 'testMetadataWithComments'.
  assert: pMetadata isKindOfMap.
  assert: pMetadata size equals: 1.
  assert: (pMetadata at: 'method-meta') equals: 'metadataWithComments: 3'.
  assert: bMetadata isKindOfMap.
  assert: bMetadata size equals: 1.
  assert: (bMetadata at: 'method-meta') equals: '*||| 3'  
)
) : (
TEST_CONTEXT = ()
)
public class ASTTests = TestContext (
) (
) : (
TEST_CONTEXT = ()
)
) : (
)
