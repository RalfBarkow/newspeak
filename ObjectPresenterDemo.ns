Newspeak3
'Root'
class ObjectPresenterDemo  packageUsing: manifest = (
(*An experiment for testing debugging the Hopscotch 2 UI.*)
|
private WebIDE = manifest HopscotchWebIDE packageUsing: manifest.
|
) (
class Demo usingPlatform: p browsing: browsing <Browsing> = (
(* Describe the class in this comment. *)
|
	Subject = p hopscotch core Subject.
	ProgrammingPresenter =  browsing ProgrammingPresenter.
	EvaluationSubject = browsing EvaluationViewState.
|
) (
class DemoPresenter onSubject: s = ProgrammingPresenter onSubject: s (
(* A test class for  Hopscotch 2. *)
) (
public definition ^ <Fragment> = (
    ^row: {homeButton. subject evaluator presenter}
)
public isKindOfDemoPresenter ^ <Boolean> = (
  ^true
)
isMyKind: otherFragment <Fragment> ^ <Boolean> = (
  ^otherFragment isKindOfDemoPresenter
)
) : (
)
public class DemoSubject onModel: os <ObjectSubject> = Subject onModel: os  (
(* Describe the class in this comment. *)
|
public evaluator <EvaluationViewState> = EvaluationSubject onModel: os.
|
) (
public createPresenter = (
	^DemoPresenter onSubject: self
)
public evaluate: src <String> = (
 ^evaluator evaluate: src
)
public resetPresenters = (
  super resetPresenters.
  evaluator resetPresenters.
)
public isKindOfDemoSubject ^ <Boolean> = (
  ^true
)
isMyKind: otherFragment <Fragment> ^ <Boolean> = (
  ^otherFragment isKindOfDemoSubject
  )
) : (
)
) : (
)
public main: platform args: args = (
	|
	om <ObjectMirror> = platform mirrors ObjectMirror reflecting: Object new.
	ide <HopscotchWebIDE> = WebIDE ideUsingPlatform: platform.
	os <ObjectSubject> = ide browsing ObjectSubject onModel: om.
	demo <Demo> = Demo usingPlatform: platform browsing: ide browsing.	
	demoSubject = demo DemoSubject onModel: os .
	|

	platform hopscotch core HopscotchWindow openSubject: demoSubject.
)
) : (
)
